/*

https://leetcode.com/problems/valid-sudoku/
Valid Sudoku
Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.

Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
*/

class Solution {
    public boolean isValidSudoku(char[][] board) {
        int rows = board.length;
        int columns = board[0].length;
        for(int i=0;i<rows;i++)
        {
            HashSet<Character> rowSet = new HashSet<>();
            for(int j=0;j<columns;j++)
            {
                if(board[i][j]!='.')
                {
                    if(rowSet.contains(board[i][j]))
                        return false;
                    rowSet.add(board[i][j]);
                }
            }
        }
        for(int i=0;i<rows;i++)
        {
            HashSet<Character> columnSet = new HashSet<>();
            for(int j=0;j<columns;j++)
            {
                if(board[j][i]!='.')
                {
                    if(columnSet.contains(board[j][i]))
                        return false;
                    columnSet.add(board[j][i]);
                }
            }
        }
        
        for(int i=0;i<9;i+=3)
        {
            for(int j=0;j<9;j+=3)
            {
                if(!check(board,i,j))
                    return false;
            }
        }
        
        return true;
    }
    
    public boolean check(char[][] board,int row,int column)
    {
        HashSet<Character> box = new HashSet<>();
        for(int i=row;i<row+3;i++)
        {
            for(int j=column;j<column+3;j++)
            {
                if(board[i][j]!='.')
                {
                    if(box.contains(board[i][j]))
                        return false;
                    box.add(board[i][j]);
                }
            }
        }
        return true;
    }
}


/*
Time Complexity : O(n*n)
HashSet contains and add = O(1)

*/