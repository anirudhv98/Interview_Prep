/*
Add Two Numbers
https://leetcode.com/problems/add-two-numbers/
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]

You may assume the two numbers do not contain any leading zero, except the number 0 itself.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry=0;
        ListNode dummy = new ListNode(-1);
        ListNode head=dummy;
        while(l1!=null || l2!=null)
        {
            ListNode temp = new ListNode();
            dummy.next=temp;
            int p = (l1!=null)?l1.val:0;
            int q = (l2!=null)?l2.val:0;
            
            int sum=p+q+carry;
            temp.val=(sum%10);
            carry=sum/10;
            dummy=temp;
            if(l1!=null)
                l1=l1.next;
            if(l2!=null)
                l2=l2.next;
        }
        if(carry!=0)
        {
            ListNode temp = new ListNode(carry);
            dummy.next=temp;
        }
        
        return head.next;
        
    }
}

/*
Time Complexity : O(n)
*/