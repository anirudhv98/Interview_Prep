/*
Max Area of Island
https://leetcode.com/problems/max-area-of-island/
You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.

Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6
Explanation: The answer is not 11, because the island must be connected 4-directionally.

Input: grid = [[0,0,0,0,0,0,0,0]]
Output: 0
*/

class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int []area=new int[1];
        int rows = grid.length;
        int maxArea=0;
        int columns = grid[0].length;
        for(int i=0;i<rows;i++)
        {
            for(int j=0;j<columns;j++)
            {
                dfs(grid,i,j,rows,columns,area);
                maxArea=Math.max(area[0],maxArea);
                area[0]=0;
            }
        }
        return maxArea;
    }
    
    public void dfs(int [][]grid,int i,int j,int rows,int columns,int []area)
    {
        if(i<0 || i>=rows || j<0 || j>=columns || grid[i][j]==0)
        {
            return;
        }
        if(grid[i][j]==1)
        {
            grid[i][j]=2;
            area[0]+=1;
            dfs(grid,i+1,j,rows,columns,area);
            dfs(grid,i-1,j,rows,columns,area);
            dfs(grid,i,j+1,rows,columns,area);
            dfs(grid,i,j-1,rows,columns,area);
        }
    }
}

/*
Time Complexity : O(m*n) where m = number of rows and n = number of columns
Space Complexity : O(m*n) worst case if DFS goes till max depth of m*n
*/