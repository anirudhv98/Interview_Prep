/*
Surrounded Regions
https://leetcode.com/problems/surrounded-regions/

Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
Explanation: Notice that an 'O' should not be flipped if:
- It is on the border, or
- It is adjacent to an 'O' that should not be flipped.
The bottom 'O' is on the border, so it is not flipped.
The other three 'O' form a surrounded region, so they are flipped.
*/

class Solution {
    public void solve(char[][] board) {
        int rows = board.length;
        int columns = board[0].length;
        for(int j=0;j<columns;j++)
        {
            dfs(board,0,j,rows,columns);
            dfs(board,rows-1,j,rows,columns);
        }
        for(int i=0;i<rows;i++)
        {
            dfs(board,i,0,rows,columns);
            dfs(board,i,columns-1,rows,columns);
        }
        for(int i=0;i<rows;i++)
        {
            for(int j=0;j<columns;j++)
            {
                if(board[i][j]=='O')
                    board[i][j]='X';
                else if(board[i][j]=='Z')
                    board[i][j]='O';
            }
        }
    }
    
    public void dfs(char [][]board,int i,int j,int rows,int columns)
    {
        if(i<0 || i>=rows || j<0 || j>=columns || board[i][j]!='O')
            return;
        board[i][j]='Z';
        dfs(board,i+1,j,rows,columns);
        dfs(board,i-1,j,rows,columns);
        dfs(board,i,j+1,rows,columns);
        dfs(board,i,j-1,rows,columns);
    }
}

/*
Time Complexity : O(m*n)
*/