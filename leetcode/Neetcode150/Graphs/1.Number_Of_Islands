/*
Number of Islands
https://leetcode.com/problems/number-of-islands/

Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
*/

class Solution {
    public int numIslands(char[][] grid) {
        int rows=grid.length;
        int columns = grid[0].length;
        int count=0;
        for(int i=0;i<rows;i++)
        {
            for(int j=0;j<columns;j++)
            {
                if(grid[i][j]=='1')
                {
                    dfs(grid,i,j,rows,columns);
                    count++;
                }
            }
        }
        
        return count;
    }
    
    public void dfs(char [][]grid,int i,int j,int rows,int columns)
    {
        if(i<0 || i>=rows || j<0 || j>=columns || grid[i][j]!='1')
        {
            return;
        }
        if(grid[i][j]=='1')
        {
            grid[i][j]='2';
            dfs(grid,i+1,j,rows,columns);
            dfs(grid,i-1,j,rows,columns);
            dfs(grid,i,j+1,rows,columns);
            dfs(grid,i,j-1,rows,columns);
        }
    }
}

/*
Time Complexity : O(m*n) where m is the number of rows and n is the number of columns
Space Complexity : at most O(m*n) in case DFS goes m*n deep
*/