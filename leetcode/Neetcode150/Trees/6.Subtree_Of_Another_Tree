/*
Subtree of Another Tree
https://leetcode.com/problems/subtree-of-another-tree/

Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.

A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.

Input: root = [3,4,5,1,2], subRoot = [4,1,2]
Output: true

Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]
Output: false
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode root, TreeNode subRoot) {
        if(root==null)
            return false;
        if(check(root,subRoot))
            return true;
        if(root==null && subRoot==null)
            return true;
        return isSubtree(root.left,subRoot) || isSubtree(root.right,subRoot);
    }
    
    public boolean check(TreeNode p, TreeNode q)
    {
        if(p==null||q==null)
        {
            return p==q;
        }
        if(p.val!=q.val)
        {
            return false;
        }
        
        return (p.val==q.val) && check(p.left,q.left) && check(p.right,q.right);
    }
}

/*
Time Complexity : O(m*n), worst case: for each node in the 1st tree, we need to check if check(Node s, Node t). Total m nodes, check(...) takes O(n) worst case
*/